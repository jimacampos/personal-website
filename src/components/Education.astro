---
import { siteConfig } from "../config";
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
---

{
  hasEducation && (
    <section id="education" class="p-8 sm:p-12 md:p-16 lg:p-24">
      <div>
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
          <div class="lg:col-span-4">
            <button
              id="education-toggle"
              class="flex items-center gap-4 mb-4 lg:mb-0 group cursor-pointer hover:opacity-80 transition-opacity duration-300 text-left w-full"
              aria-label="Toggle education section"
            >
              <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-gray-900">
                Education
              </h2>
              <div
                class="flex items-center justify-center w-10 h-10 rounded-full transition-all duration-300 group-hover:bg-gray-100"
                style={`color: ${siteConfig.accentColor}`}
              >
                <svg class="w-6 h-6 transform transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
            </button>
            <div
              class="w-[75px] h-[5px] mt-2 rounded-full"
              style={`background-color: ${siteConfig.accentColor}`}
            />
            <p class="text-sm text-gray-500 mt-4 lg:mt-6">
              Click on the title above to view my educational background
            </p>
          </div>

          <div class="lg:col-span-8">
            <div id="education-content" class="space-y-8 transition-all duration-500 overflow-hidden">
              {siteConfig.education.map((edu) => (
                <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-4 sm:p-5 md:p-6 hover:shadow-md transition-shadow duration-300">
                  <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-4">
                    <div>
                      <h3 class="text-lg sm:text-xl font-semibold text-gray-900">
                        {edu.degree}
                      </h3>
                      <p
                        class="text-base sm:text-lg"
                        style={`color: ${siteConfig.accentColor}`}
                      >
                        {edu.school}
                      </p>
                    </div>
                    <span class="text-xs sm:text-sm text-gray-500 mt-2 sm:mt-0">
                      {edu.dateRange}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButton = document.getElementById('education-toggle');
    const content = document.getElementById('education-content');
    const chevron = toggleButton?.querySelector('svg');
    
    if (!toggleButton || !content || !chevron) return;
    
    let isCollapsed = true;
    let contentHeight = content.scrollHeight;
    
    // Set initial collapsed state
    content.style.maxHeight = '0px';
    chevron.style.transform = 'rotate(-90deg)';
    
    toggleButton.addEventListener('click', function() {
      if (!isCollapsed) {
        // Collapse
        content.style.maxHeight = '0px';
        content.style.paddingTop = '0px';
        content.style.paddingBottom = '0px';
        chevron.style.transform = 'rotate(-90deg)';
        isCollapsed = true;
      } else {
        // Expand - recalculate height first
        contentHeight = content.scrollHeight;
        content.style.maxHeight = contentHeight + 'px';
        content.style.paddingTop = '';
        content.style.paddingBottom = '';
        chevron.style.transform = 'rotate(0deg)';
        isCollapsed = false;
      }
    });
    
    // Recalculate height on window resize
    window.addEventListener('resize', function() {
      if (!isCollapsed) {
        contentHeight = content.scrollHeight;
        content.style.maxHeight = contentHeight + 'px';
      }
    });
  });
</script>
